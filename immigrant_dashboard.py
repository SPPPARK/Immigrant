# -*- coding: utf-8 -*-
"""Immigrant_Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uv0rKwW84Nn22LJ8mIV85onjfyAhvI7D
"""

!pip install streamlit pandas geopandas folium branca

import folium.plugins
print(folium.plugins)

!pip install pyodbc

!sudo apt-get update
!sudo apt-get install -y unixodbc-dev
!curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
!curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
!sudo apt-get update
!sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17

import streamlit as st
from streamlit.components.v1 import html
from sqlalchemy import create_engine
import pyodbc
import pandas as pd
import plotly.graph_objects as go
import requests
from ipyleaflet import Map, Marker, Popup, MarkerCluster, LayerGroup, Icon, GeoJSON, WidgetControl
from ipywidgets import HTML, Button, VBox, HBox, Layout, Output, ToggleButton
import json
from IPython.display import IFrame
import folium
from folium.plugins import MarkerCluster

# 数据库连接配置
server = 'yunzhey2.database.windows.net'
database = 'ChicagoCommunity'
username = 'sqladmin'
password = 'Yyz87762098!'
connection_string = f"mssql+pyodbc://{username}:{password}@{server}/{database}?driver=ODBC+Driver+17+for+SQL+Server&connect_timeout=30"
engine = create_engine(connection_string)

# Streamlit 页面设置
st.set_page_config(page_title="Chicago Community Dashboard", layout="wide")

# 标题和说明
st.title("Chicago Neighborhood Dashboard")
st.write("Click on a neighborhood to view detailed information.")

# 下载 GeoJSON 数据
geojson_url = "https://services8.arcgis.com/NxqmZt019CIOnKfc/arcgis/rest/services/Chicago_Neighborhoods/FeatureServer/0/query?where=1=1&outFields=*&outSR=4326&f=geojson"
response = requests.get(geojson_url)
geojson_data = response.json()

# Wikipedia 嵌入
def get_wikipedia_iframe(neighborhood_name):
    url = f"https://en.wikipedia.org/wiki/{neighborhood_name.replace(' ', '_')},_Chicago"
    iframe = f'<iframe src="{url}" width="100%" height="400"></iframe>'
    return iframe

# 数据查询和饼图生成函数
def query_data(query):
    try:
        return pd.read_sql_query(query, engine)
    except Exception as e:
        st.error(f"数据查询错误: {e}")
        return pd.DataFrame()

def create_pie_chart(labels, values, title, colors):
    fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.3, marker=dict(colors=colors))])
    fig.update_layout(title_text=title, title_x=0.5, font=dict(size=14), margin=dict(t=50, b=50, l=50, r=50))
    return fig

# Population
def visualize_population(community_name):
    query = f"""
    SELECT Population_Children_Under_19, Population_Adults_20To64, Population_Elderly_Over65,
           Population_White, Population_HispanicOrLatino, Population_Black, Population_Asian, Population_Other_MultipleRaces
    FROM ChicagoCommunityData WHERE CommunityAreaName = '{community_name}'
    """
    df = query_data(query)
    if df.empty:
        st.warning("Data Not Available")
        return

    row = df.iloc[0]
    fig1 = create_pie_chart(
        labels=["Children (<19)", "Adults (20-64)", "Elderly (>65)"],
        values=[row["Population_Children_Under_19"], row["Population_Adults_20To64"], row["Population_Elderly_Over65"]],
        title=f"Population Distribution in {community_name} By Age",
        colors=["#4682B4", "#87CEEB", "#000080"]
    )
    fig2 = create_pie_chart(
        labels=["White", "Hispanic or Latino", "Black", "Asian", "Other/Multiple Races"],
        values=[row["Population_White"], row["Population_HispanicOrLatino"], row["Population_Black"], row["Population_Asian"], row["Population_Other_MultipleRaces"]],
        title=f"Population Distribution in {community_name} By Race",
        colors=["#4682B4", "#4169E1", "#000080", "#00BFFF", "#87CEEB"]
    )
    st.plotly_chart(fig1)
    st.plotly_chart(fig2)

#Education
def visualize_education(community_name):
    query = f"""
    SELECT EducationLv_LessThanHighSchool, EducationLv_HighSchoolOrEquivalent, EducationLv_SomeCollege_NoDegree,
           EducationLv_Associate, EducationLv_Bachelor, EducationLv_GraduateOrProfessional
    FROM ChicagoCommunityData WHERE CommunityAreaName = '{community_name}'
    """
    df = query_data(query)
    if df.empty:
        st.warning("Data Not Available")
        return

    row = df.iloc[0]
    fig3 = create_pie_chart(
        labels=["Less than High School", "High School or Equivalent", "Some College No Degree",
                "Associate", "Bachelor", "Graduate Or Professional"],
        values=[row["EducationLv_LessThanHighSchool"], row["EducationLv_HighSchoolOrEquivalent"],
                row["EducationLv_SomeCollege_NoDegree"], row["EducationLv_Associate"],
                row["EducationLv_Bachelor"], row["EducationLv_GraduateOrProfessional"]],
        title=f"Education Level Distribution in {community_name}",
        colors=["#4682B4", "#4169E1", "#000080", "#00BFFF", "#87CEEB", "#ADD8E6"]
    )
    st.plotly_chart(fig3)

#Income
def visualize_income(community_name):
    query = f"""
    SELECT Income_Less25000, Income_25000To49999, Income_50000To74999, Income_75000To99999,
           Income_100000To149999, Income_150000AndOver, Income_MedianIncome, Income_PerCapitaIncome
    FROM ChicagoCommunityData WHERE CommunityAreaName = '{community_name}'
    """
    df = query_data(query)
    if df.empty:
        st.warning("Data Not Available")
        return

    row = df.iloc[0]
    fig4 = create_pie_chart(
        labels=["≤$25,000", "$25,000-49,999", "$50,000-74,999", "$75,000-99,999", "$100,000-149,999", "≥150,000"],
        values=[row["Income_Less25000"], row["Income_25000To49999"], row["Income_50000To74999"],
                row["Income_75000To99999"], row["Income_100000To149999"], row["Income_150000AndOver"]],
        title=f"Income Level Distribution in {community_name}",
        colors=["#4682B4", "#4169E1", "#000080", "#00BFFF", "#ADD8E6", "#87CEEB"]
    )
    st.plotly_chart(fig4)
    st.write(f"**Median Income:** ${row['Income_MedianIncome']} &nbsp;&nbsp;&nbsp; **Per Capita Income:** ${row['Income_PerCapitaIncome']}")

#Emplyment
def visualize_employment(community_name):
    query = f"""
    SELECT Employment_Employed, Employment_Unemployed, Employment_NotInLaborForce
    FROM ChicagoCommunityData
    WHERE CommunityAreaName = '{community_name}'
    """
    df = query_data(query)
    if df.empty:
      st.warning("Data Not Available")
      return

    row = df.iloc[0]
    fig5 = create_pie_chart(
        labels = ["Employed", "Unemployed", "Not In Labor Force"],
        values = [row["Employment_Employed"], row["Employment_Unemployed"], row["Employment_NotInLaborForce"]],
        title = f"Employment Situation in {community_name}",
        colors = ["#4682B4", "#000080", "#87CEEB"]
    )
    st.plotly_chart(fig5)

#House
def visualize_house(community_name):
    query = f"""
    SELECT HousingTypes_Single, HousingTypes_Multi, HousingTypes_Mobile,
           HousingCosts_Less20000, HousingCosts_20000To49999, HousingCosts_50000To74999, HousingCosts_75000OrMore
    FROM ChicagoCommunityData
    WHERE CommunityAreaName = '{community_name}'
    """
    df = query_data(query)
    if df.empty:
        st.warning("Data Not Available")
        return

    row = df.iloc[0]
    fig6 = create_pie_chart(
        labels=["Single", "Multi", "Mobile"],
        values=[row["HousingTypes_Single"], row["HousingTypes_Multi"], row["HousingTypes_Mobile"]],
        title=f"Hosuing Type in {community_name}",
        colors=["#4682B4", "#000080", "#87CEEB"]
    )
    fig7 = create_pie_chart(
        labels=["≤$20,000", "$20,000-49,999", "$50,000-74,999", "≥$75,000"],
        values=[row["HousingCosts_Less20000"], row["HousingCosts_20000To49999"], row["HousingCosts_50000To74999"], row["HousingCosts_75000OrMore"]],
        title=f"Housing Cost Distribution in {community_name}",
        colors=["#4682B4", "#4169E1", "#000080", "#00BFFF"]
    )
    st.plotly_chart(fig6)
    st.plotly_chart(fig7)

# Police Station, Fire Station, School and Hospital
def add_to(map_object):
    # 添加警察局标记
    fire_cluster = MarkerCluster(name="Fire Stations")
    police_cluster = MarkerCluster(name="Police Stations")
    school_cluster = MarkerCluster(name="Schools")

    police_data = requests.get("https://data.cityofchicago.org/resource/z8bn-74gv.json").json()
    police_icon = folium.CustomIcon('https://cdn-icons-png.flaticon.com/512/5600/5600529.png', icon_size=(25, 25))
    for police in police_data:
        lat = float(police.get("latitude", 0))
        lon = float(police.get("longitude", 0))
        name = police.get("dname", "Unknown")
        address = police.get("address", "Unknown address")
        popup_content = HTML(f"<strong>Police Station:</strong> {name}<br><em>Address:</em> {address}")
        folium.Marker(location=(lat, lon), icon=police_icon, popup=folium.Popup(popup_content, max_width=250)).add_to(police_cluster)
    police_cluster.add_to(map_object)

    # 添加消防站标记
    fire_data = requests.get("https://data.cityofchicago.org/resource/28km-gtjn.json").json()
    fire_icon = folium.CustomIcon('https://cdn-icons-png.flaticon.com/512/11210/11210082.png', icon_size=(25, 25))
    for fire in fire_data:
        location = fire.get("location", {})
        lat = float(location.get("latitude", 0))
        lon = float(location.get("longitude", 0))
        name = fire.get("name", "Unknown")
        address = fire.get("address", "Unknown address")
        popup_content = HTML(f"<strong>Fire Station:</strong> {name}<br><em>Address:</em> {address}")
        folium.Marker(location=(lat, lon), icon=fire_icon, popup=folium.Popup(popup_content, max_width=250)).add_to(fire_cluster)
    fire_cluster.add_to(map_object)

    # 学校数据
    school_data = requests.get("https://data.cityofchicago.org/resource/76dk-7ieb.json").json()
    school_icon = folium.CustomIcon('https://cdn-icons-png.flaticon.com/512/7117/7117687.png', icon_size=(25, 25))
    for school in school_data:
        lat = float(school.get("latitude", 0))
        lon = float(school.get("longitude", 0))
        name = school.get("name", "Unknown")
        address = school.get("address", "Unknown address")
        popup_content = HTML(f"<strong>School:</strong> {name}<br><em>Address:</em> {address}")
        folium.Marker(location=(lat, lon), icon=school_icon, popup=folium.Popup(popup_content, max_width=250)).add_to(school_cluster)
    school_cluster.add_to(map_object)

# 创建 Folium 地图
m = folium.Map(location=[41.8379, -87.6828], zoom_start=10, width="100%", height="800px")

# 定义样式
def style_function(feature):
    return {
        "color": "black",
        "weight": 1,
        "fillColor": "orange",
        "fillOpacity": 0.5,
    }

def highlight_function(feature):
    return {
        "color": "black",
        "weight": 2,
        "fillColor": "red",
        "fillOpacity": 0.7,
    }


# JavaScript 点击事件
click_js = """
function(feature, layer) {
    layer.on({
        click: function(e) {
            var neighborhood = feature.properties.pri_neigh;
            // 更新社区名称到 window 对象
            window.selectedNeighborhood = neighborhood;
            // 调用 Streamlit 后端
            fetch('/streamlit-update', {
                method: 'POST',
                body: JSON.stringify({ neighborhood: neighborhood }),
                headers: {
                    'Content-Type': 'application/json',
                },
            }).then(response => response.json()).then(data => {
                console.log('Neighborhood updated:', data);
            });
        }
    });
}
"""

# 添加 GeoJSON 图层，绑定点击事件
geo_layer = folium.GeoJson(
    data=geojson_data,
    name="Neighborhoods",
    style_function=style_function,
    highlight_function=highlight_function,
    tooltip=folium.GeoJsonTooltip(fields=["pri_neigh"], aliases=["Neighborhood:"]),
)
geo_layer.add_child(folium.Element(f"<script>{click_js}</script>"))

geo_layer.add_to(m)
add_to(m)
st.components.v1.html(m._repr_html_(), height=800)

# 处理点击事件后显示内容
if "selected_neighborhood" not in st.session_state:
    st.session_state.selected_neighborhood = None

# 处理事件
if st.session_state.selected_neighborhood:
    name = st.session_state.selected_neighborhood
    st.write(f"### Selected Neighborhood: {name}")

    # 获取 Wikipedia 页面
    st.write("### Wikipedia Information")
    iframe = get_wikipedia_iframe(name)
    st.components.v1.html(iframe, height=400)

    # 动态显示图表
    if st.checkbox("Show Population Chart"):
        visualize_population(name)

    if st.checkbox("Show Education Chart"):
        visualize_education(name)

    if st.checkbox("Show Income Chart"):
        visualize_income(name)

    if st.checkbox("Show Employment Chart"):
        visualize_employment(name)

    if st.checkbox("Show Housing Chart"):
        visualize_house(name)